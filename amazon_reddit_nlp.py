# -*- coding: utf-8 -*-
"""Amazon_reddit_NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yDQRqCK_MobXTClnLXUgRhNsdBfoe98H
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data_yelp = pd.read_csv('/content/yelp_labelled.txt', sep ='\t', header=None)
data_yelp.head()

columan_name = ['Review', 'Sentiment']
data_yelp.columns = columan_name

data_yelp.head()

data_yelp.shape

data_amazon = pd.read_csv('/content/amazon_cells_labelled.txt', sep='\t', header= None)
data_amazon.head()

data_amazon.columns = columan_name

data_amazon.head()

data_amazon.shape

data_imdb = pd.read_csv('/content/imdb_labelled.txt',sep='\t',header=None)
data_imdb.head()

data_imdb.columns= columan_name

data_imdb.shape

data= data_yelp.append([data_amazon, data_imdb],ignore_index=True)
data.shape

data['Sentiment'].value_counts()

data.isnull().sum()

x=data['Review']
y=data['Sentiment']

"""Data Cleaning"""

import string

punct = string.punctuation
punct

!pip install spacy

!pip install spacy.lang.en.stop_word

from spacy.lang.en import STOP_WORDS

stopwords = list(STOP_WORDS)
stopwords

import spacy
nlp = spacy.load('en_core_web_sm')
def text_data_cleaning(sentence):
  doc = nlp(sentence)
  tokens = []
  for token in doc:
    if token.lemma_ != "-PRON-":
      temp = token.lemma_.lower().strip()
    else:
      temp = token.lower_
    tokens.append(temp)
  cleaned_tokens=[]
  for token in tokens:
    if token not in stopwords and token not in punct:
      cleaned_tokens.append(token)
  return cleaned_tokens

text_data_cleaning("Hello all, It's a beautiful day outside there!")



"""TF-IDF"""

from sklearn.svm import LinearSVC
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline

tfidf = TfidfVectorizer(tokenizer= text_data_cleaning)

classifier = LinearSVC()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state= 0)

x_train.shape, x_test.shape

x_train.head()

clf = Pipeline([('tfidf', tfidf),('clf',classifier)])

clf.fit(x_train,y_train)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

y_pred = clf.predict(x_test)

confusion_matrix(y_test, y_pred)

print(classification_report(y_test, y_pred))

accuracy_score(y_test,y_pred)

clf.predict(["Wow, I am learning NLP in fun Fashion!"])

clf.predict(["It's hard to learn new things!"])

user_input = input('Enter the review to classify\n')
clf.predict([user_input])